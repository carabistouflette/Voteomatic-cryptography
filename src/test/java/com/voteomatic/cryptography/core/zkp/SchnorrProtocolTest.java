package com.voteomatic.cryptography.core.zkp;

import com.voteomatic.cryptography.securityutils.HashAlgorithm;
import com.voteomatic.cryptography.securityutils.SHA256HashAlgorithm;
import com.voteomatic.cryptography.securityutils.SecureRandomGenerator;
import com.voteomatic.cryptography.securityutils.SecureRandomGeneratorImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import java.math.BigInteger;

public class SchnorrProtocolTest {

    private SecureRandomGenerator secureRandomGenerator;
    private HashAlgorithm hashAlgorithm;
    private SchnorrProver schnorrProver;
    private SchnorrVerifier schnorrVerifier;

    private BigInteger p; // Prime modulus
    private BigInteger g; // Generator
    private BigInteger q; // Order of the group generated by g
    private BigInteger x; // Witness (secret)
    private BigInteger y; // Public value (y = g^x mod p)

    private SchnorrStatement statement;
    private SchnorrWitness witness;

    @BeforeEach
    void setUp() {
        secureRandomGenerator = new SecureRandomGeneratorImpl();
        hashAlgorithm = new SHA256HashAlgorithm();
        schnorrProver = new SchnorrProver(hashAlgorithm, secureRandomGenerator);
        schnorrVerifier = new SchnorrVerifier(hashAlgorithm);

        // Using simple parameters for testing (same as ElGamalCipherImplTest)
        p = BigInteger.valueOf(23);
        g = BigInteger.valueOf(2); // Use generator of order q=11
        q = BigInteger.valueOf(11); // q must be a prime factor of p-1 (22)

        // Generate witness and corresponding public value
        x = BigInteger.valueOf(7); // Example secret witness
        y = g.modPow(x, p); // y = 2^7 mod 23 = 13

        statement = new SchnorrStatement(p, q, g, y); // Corrected argument order
        witness = new SchnorrWitness(x);
    }

    @Test
    void testProveAndVerify_Success() throws ZkpException {
        // 1. Prover generates proof
        SchnorrProof proof = schnorrProver.generateProof(statement, witness);

        // Assert proof components are not null (basic check)
        Assertions.assertNotNull(proof.getT(), "Proof component 't' should not be null");
        Assertions.assertNotNull(proof.getS(), "Proof component 's' should not be null");

        // 2. Verifier verifies the proof
        boolean isValid = schnorrVerifier.verifyProof(statement, proof);

        // 3. Assert verification is successful
        Assertions.assertTrue(isValid, "Verification should succeed for a valid proof generated with the correct witness.");
    }

    // Optional: Test for invalid proof verification
    @Test
    void testVerify_InvalidProof_ModifiedS() throws ZkpException {
        // 1. Generate a valid proof
        SchnorrProof proof = schnorrProver.generateProof(statement, witness);

        // 2. Modify the proof slightly to make it invalid
        BigInteger modifiedS = proof.getS().add(BigInteger.ONE).mod(q); // Change s
        SchnorrProof invalidProof = new SchnorrProof(proof.getT(), modifiedS);

        // 3. Verifier verifies the invalid proof
        boolean isValid = schnorrVerifier.verifyProof(statement, invalidProof);

        // 4. Assert verification fails
        Assertions.assertFalse(isValid, "Verification should fail for an invalid proof (modified 's').");
    }

     // Optional: Test for invalid proof verification (modified t)
    @Test
    void testVerify_InvalidProof_ModifiedT() throws ZkpException {
        // 1. Generate a valid proof
        SchnorrProof proof = schnorrProver.generateProof(statement, witness);

        // 2. Modify the proof slightly to make it invalid
        BigInteger modifiedT = proof.getT().add(BigInteger.ONE).mod(p); // Change t
        SchnorrProof invalidProof = new SchnorrProof(modifiedT, proof.getS());

        // 3. Verifier verifies the invalid proof
        boolean isValid = schnorrVerifier.verifyProof(statement, invalidProof);

        // 4. Assert verification fails
        Assertions.assertFalse(isValid, "Verification should fail for an invalid proof (modified 't').");
    }
}