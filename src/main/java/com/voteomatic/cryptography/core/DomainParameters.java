package com.voteomatic.cryptography.core;

import java.math.BigInteger;
import java.util.Objects;

/**
 * Represents the cryptographic domain parameters (p, g, q) for Diffie-Hellman based schemes like
 * ElGamal. This class is immutable.
 */
public final class DomainParameters {
  private final BigInteger p; // Prime modulus
  private final BigInteger g; // Generator
  private final BigInteger q; // Prime order of the subgroup generated by g

  /**
   * Constructs DomainParameters. Basic validation (non-null) is performed. More extensive
   * validation (e.g., primality of p and q, g being a generator of order q mod p) should be
   * performed *before* constructing this object, typically when loading or generating parameters
   * externally.
   *
   * @param p Prime modulus. Must be non-null.
   * @param g Generator. Must be non-null.
   * @param q Prime order of the subgroup generated by g. Must be non-null.
   */
  public DomainParameters(BigInteger p, BigInteger g, BigInteger q) {
    this.p = Objects.requireNonNull(p, "Prime modulus p cannot be null");
    this.g = Objects.requireNonNull(g, "Generator g cannot be null");
    this.q = Objects.requireNonNull(q, "Prime subgroup order q cannot be null");
    // TODO: Consider adding validation checks here if desired, e.g.:
    // - p and q are probable primes
    // - q divides p-1
    // - g != 1 and g^q mod p == 1 (g generates subgroup of order q)
  }

  /**
   * Gets the prime modulus p.
   *
   * @return The prime modulus p.
   */
  public BigInteger getP() {
    return p;
  }

  /**
   * Gets the generator g.
   *
   * @return The generator g.
   */
  public BigInteger getG() {
    return g;
  }

  /**
   * Gets the prime order q of the subgroup generated by g.
   *
   * @return The prime subgroup order q.
   */
  public BigInteger getQ() {
    return q;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainParameters that = (DomainParameters) o;
    return p.equals(that.p) && g.equals(that.g) && q.equals(that.q);
  }

  @Override
  public int hashCode() {
    return Objects.hash(p, g, q);
  }

  @Override
  public String toString() {
    // Avoid overly verbose logging if parameters are large
    return "DomainParameters{"
        + "p=..."
        + // p.toString().substring(0, Math.min(p.toString().length(), 10)) + "..." +
        ", g="
        + g
        + // g is usually small
        ", q=..."
        + // q.toString().substring(0, Math.min(q.toString().length(), 10)) + "..." +
        '}';
  }
}
