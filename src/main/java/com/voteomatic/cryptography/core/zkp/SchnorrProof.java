package com.voteomatic.cryptography.core.zkp;

import java.math.BigInteger;
import java.util.Objects;

/**
 * Represents the proof generated by Schnorr's protocol.
 * Contains the commitment (t) and the response (s).
 */
public class SchnorrProof implements Proof {

    private final BigInteger t; // Commitment: t = g^v mod p
    private final BigInteger s; // Response: s = (v - c*x) mod q

    /**
     * Constructs a SchnorrProof.
     *
     * @param t The commitment value.
     * @param s The response value.
     * @throws IllegalArgumentException if t or s is null.
     */
    public SchnorrProof(BigInteger t, BigInteger s) {
        if (t == null || s == null) {
            throw new IllegalArgumentException("Proof parameters t and s cannot be null");
        }
        this.t = t;
        this.s = s;
    }

    public BigInteger getT() {
        return t;
    }

    public BigInteger getS() {
        return s;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SchnorrProof that = (SchnorrProof) o;
        return Objects.equals(t, that.t) &&
               Objects.equals(s, that.s);
    }

    @Override
    public int hashCode() {
        return Objects.hash(t, s);
    }

    @Override
    public String toString() {
        return "SchnorrProof{" +
               "t=" + t +
               ", s=" + s +
               '}';
    }
}