package com.voteomatic.cryptography.core.zkp;

import java.math.BigInteger;
import java.util.Objects;

/**
 * Represents the public statement for Schnorr's protocol.
 * Contains the public values (p, q, g, y) such that y = g^x mod p,
 * where q is the order of the group generated by g.
 */
public class SchnorrStatement implements Statement {

    private final BigInteger p;
    private final BigInteger q;
    private final BigInteger g;
    private final BigInteger y;

    /**
     * Constructs a SchnorrStatement.
     *
     * @param p The prime modulus.
     * @param q The order of the subgroup generated by g.
     * @param g The generator.
     * @param y The public value (y = g^x mod p).
     * @throws IllegalArgumentException if any parameter is null.
     */
    public SchnorrStatement(BigInteger p, BigInteger q, BigInteger g, BigInteger y) {
        if (p == null || q == null || g == null || y == null) {
            throw new IllegalArgumentException("Statement parameters cannot be null");
        }
        // Basic validation could be added here (e.g., p is prime, q divides p-1, g is generator)
        // For simplicity, we assume valid inputs as per task description.
        this.p = p;
        this.q = q;
        this.g = g;
        this.y = y;
    }

    public BigInteger getP() {
        return p;
    }

    public BigInteger getQ() {
        return q;
    }

    public BigInteger getG() {
        return g;
    }

    public BigInteger getY() {
        return y;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SchnorrStatement that = (SchnorrStatement) o;
        return Objects.equals(p, that.p) &&
               Objects.equals(q, that.q) &&
               Objects.equals(g, that.g) &&
               Objects.equals(y, that.y);
    }

    @Override
    public int hashCode() {
        return Objects.hash(p, q, g, y);
    }

    @Override
    public String toString() {
        return "SchnorrStatement{" +
               "p=" + p +
               ", q=" + q +
               ", g=" + g +
               ", y=" + y +
               '}';
    }
}