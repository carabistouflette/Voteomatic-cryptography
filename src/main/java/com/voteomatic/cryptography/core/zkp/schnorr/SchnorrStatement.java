package com.voteomatic.cryptography.core.zkp.schnorr;

import com.voteomatic.cryptography.core.zkp.Statement;
import java.math.BigInteger;
import java.util.Objects;

/**
 * Represents the public statement for Schnorr's protocol. Contains the public values (primeModulus,
 * subgroupOrder, generator, publicValue) such that publicValue = generator^x mod primeModulus,
 * where subgroupOrder is the order of the group generated by generator.
 */
public class SchnorrStatement implements Statement {

  private final BigInteger primeModulus; // p
  private final BigInteger subgroupOrder; // q
  private final BigInteger generator; // g
  private final BigInteger publicValue; // y

  /**
   * Private constructor for SchnorrStatement. Validation is done in the factory method.
   *
   * @param primeModulus The validated prime modulus.
   * @param subgroupOrder The validated order of the subgroup.
   * @param generator The validated generator.
   * @param publicValue The validated public value.
   */
  private SchnorrStatement(
      BigInteger primeModulus,
      BigInteger subgroupOrder,
      BigInteger generator,
      BigInteger publicValue) {
    this.primeModulus = primeModulus; // Assumed non-null by factory method
    this.subgroupOrder = subgroupOrder; // Assumed non-null by factory method
    this.generator = generator; // Assumed non-null by factory method
    this.publicValue = publicValue; // Assumed non-null by factory method
    // Basic validation could be added here (e.g., p is prime, q divides p-1, g is generator)
    // For simplicity, we assume valid inputs as per task description.
  }

  /**
   * Creates a SchnorrStatement instance.
   *
   * @param primeModulus The prime modulus. Must not be null.
   * @param subgroupOrder The order of the subgroup generated by g. Must not be null.
   * @param generator The generator. Must not be null.
   * @param publicValue The public value (y = g^x mod p). Must not be null.
   * @return A new SchnorrStatement instance.
   * @throws IllegalArgumentException if any parameter is null.
   */
  public static SchnorrStatement create(
      BigInteger primeModulus,
      BigInteger subgroupOrder,
      BigInteger generator,
      BigInteger publicValue) {
    if (primeModulus == null) {
      throw new IllegalArgumentException("Statement parameter primeModulus cannot be null");
    }
    if (subgroupOrder == null) {
      throw new IllegalArgumentException("Statement parameter subgroupOrder cannot be null");
    }
    if (generator == null) {
      throw new IllegalArgumentException("Statement parameter generator cannot be null");
    }
    if (publicValue == null) {
      throw new IllegalArgumentException("Statement parameter publicValue cannot be null");
    }
    return new SchnorrStatement(primeModulus, subgroupOrder, generator, publicValue);
  }

  public BigInteger getP() {
    return primeModulus;
  }

  public BigInteger getQ() {
    return subgroupOrder;
  }

  public BigInteger getG() {
    return generator;
  }

  public BigInteger getY() {
    return publicValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchnorrStatement that = (SchnorrStatement) o;
    return Objects.equals(primeModulus, that.primeModulus)
        && Objects.equals(subgroupOrder, that.subgroupOrder)
        && Objects.equals(generator, that.generator)
        && Objects.equals(publicValue, that.publicValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primeModulus, subgroupOrder, generator, publicValue);
  }

  @Override
  public String toString() {
    return "SchnorrStatement{"
        + "primeModulus="
        + primeModulus
        + ", subgroupOrder="
        + subgroupOrder
        + ", generator="
        + generator
        + ", publicValue="
        + publicValue
        + '}';
  }
}
